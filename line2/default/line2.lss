
line2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000007f  00000000  00000000  000000fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000004c  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000cc  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000080  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1a c0       	rjmp	.+52     	; 0x6a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>
#define F_CPU 12000000
#include<util/delay.h>
void main()
{
  DDRC=0xc0;//input for sensors make sure that all sensors are active high
  38:	80 ec       	ldi	r24, 0xC0	; 192
  3a:	84 bb       	out	0x14, r24	; 20
                                        //( high    for wight)
  PORTC=0xff;//internal pull up
  3c:	8f ef       	ldi	r24, 0xFF	; 255
  3e:	85 bb       	out	0x15, r24	; 21
  DDRD=0xff;//motor control pins
  40:	81 bb       	out	0x11, r24	; 17
  PORTD=0x00;//motor halt
  42:	12 ba       	out	0x12, r1	; 18
  unsigned char sensor;
 while(1)
 {
     sensor=PINC & 0x03;//masking for lower 2 bits
       if(sensor==0x03)// both are on white
   PORTD=0xaa;//forward
  44:	3a ea       	ldi	r19, 0xAA	; 170
  else if(sensor==0x01)//left sensor on black line
   PORTD=0x66;//left turn
  else if(sensor==0x02)//right sensor on black line
   PORTD=0x99;//right turn
  46:	29 e9       	ldi	r18, 0x99	; 153
 {
     sensor=PINC & 0x03;//masking for lower 2 bits
       if(sensor==0x03)// both are on white
   PORTD=0xaa;//forward
  else if(sensor==0x01)//left sensor on black line
   PORTD=0x66;//left turn
  48:	96 e6       	ldi	r25, 0x66	; 102
  DDRD=0xff;//motor control pins
  PORTD=0x00;//motor halt
  unsigned char sensor;
 while(1)
 {
     sensor=PINC & 0x03;//masking for lower 2 bits
  4a:	83 b3       	in	r24, 0x13	; 19
  4c:	83 70       	andi	r24, 0x03	; 3
       if(sensor==0x03)// both are on white
  4e:	83 30       	cpi	r24, 0x03	; 3
  50:	11 f4       	brne	.+4      	; 0x56 <__SREG__+0x17>
   PORTD=0xaa;//forward
  52:	32 bb       	out	0x12, r19	; 18
  54:	fa cf       	rjmp	.-12     	; 0x4a <__SREG__+0xb>
  else if(sensor==0x01)//left sensor on black line
  56:	81 30       	cpi	r24, 0x01	; 1
  58:	11 f4       	brne	.+4      	; 0x5e <__SREG__+0x1f>
   PORTD=0x66;//left turn
  5a:	92 bb       	out	0x12, r25	; 18
  5c:	f6 cf       	rjmp	.-20     	; 0x4a <__SREG__+0xb>
  else if(sensor==0x02)//right sensor on black line
  5e:	82 30       	cpi	r24, 0x02	; 2
  60:	11 f4       	brne	.+4      	; 0x66 <__SREG__+0x27>
   PORTD=0x99;//right turn
  62:	22 bb       	out	0x12, r18	; 18
  64:	f2 cf       	rjmp	.-28     	; 0x4a <__SREG__+0xb>
  else 
   PORTD=0x00;//robot stop
  66:	12 ba       	out	0x12, r1	; 18
  68:	f0 cf       	rjmp	.-32     	; 0x4a <__SREG__+0xb>

0000006a <_exit>:
  6a:	f8 94       	cli

0000006c <__stop_program>:
  6c:	ff cf       	rjmp	.-2      	; 0x6c <__stop_program>
